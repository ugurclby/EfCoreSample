Add-Migration migration_name    = > migration ekler
Update-Database                 = > son oluşan migration ı db ye yansıtır.
Update-Database migration_name  = > Eski migration a dönmeyi sağlar. 
Remove-migration                = > son oluşan migration db ye eklenmediyse siler.
Remove-migration migration_name = > migration_name i db ye eklenmediyse siler.
script-migration                = > Migration dosyalarında yapılan işlemleri sql e döker.

--------------------------------------------

State Codes : _context.Entry(entityclass).State

UnChanged = > Db den tablo çekildiği zaman ki durumu ya da savechanges metodu çalıştığında state unchanged olur.
Detached  = > Entity sınıfı üzerinde bir değişiklik yapıp state sorguladığımız zaman döner. Henüz izlenmeyen durumlar. Sildikten sonrada olur.
              Ef ye bu sınıfı artık izleme dediğimiz nokta da olur.
Added     = > Detached olan bir sınıf için add metodu çalışırsa state added olur 
Modified  = > Db den çekilen bir tablo üzerinde değişiklik yapıldığında state modified olur.
Deleted   = > Remove metodu sonrası state deleted olur.

--------------------------------------------

context üzerinden bir entity çekildikten sonra üzerinde bir düzenleme yapılırsa update işlemini çağırmadan 
savechanges metodu çalıştırıldığında otomatik olarak update işlemi yapılır. Gereksiz yere update işlemi çağırılmış olur.

--------------------------------------------

Tablo Configration ayarları : 

3 yöntem var . 

Data annotations Attributes = > Entity class ve propertyler üzerine uygulanan annotations attribute'ler ile yapılır.
                                [Table("Products")] , [Column("ProductName")] , [Key] gibi.     

Fluent Api                  = > Dbcontext içerisindeki OnModelCreating metodu altında ToTable , HasColumnName , HasKey gibi özellikler kullanılarak yapılır.
                                modelBuilder.Entity<Product>().ToTable("Products") , modelBuilder.Entity<Product>().Property(p => p.ProductName).HasColumnName("ProductName") gibi.

Convensions                 = > Tüm entityler ef core'un anlayacağı şekilde tanımlanırsa ekstra bir şey yapmaya gerek kalmaz.
                                tablo : DbSet<Product> , Kolon : PropertyName , Primary Key : Id ve ProductId gibi.

*** Hem Data annotations hemde Fluent Api kullanılabilir. Fluent api data annotations ı ezer. Validasyon için kullanılmış olur.

--------------------------------------------

Tablo İlişkileri : Bu işin best practice i Convensions dır. Tamamen doğru isimlendirmeler üzerinden ilerlemek gerekir.
İsimlendirmelerin eksik kaldığı noktada Fluent Api kullanılır.
Convensions : Ef core un default davranışı

one to many = > 

Convensions : İlişkili entityler arasında bir navigation property tanımlanmışsa ef core ilişkiyi otomatik olarak algılar.
               Product sınıfında Category sınıfına ait bir navigation property tanımlanmışsa ef core ilişkiyi otomatik olarak algılar.

Fluent Api  : modelBuilder.Entity<Catalog>().HasMany(x => x.Products).WithOne(x => x.Catalog).HasForeignKey(x => x.CatalogId);          

Data annotations Attributes : [ForeignKey("CatalogId")]

shadow property : foreing key alanın entity içerisinde olmaması durumunda ef core tarafından oluşturulan property dir. 
Detay tabloya direkt insert işlemi sadece master tablo üzerinden yapılması gereken durumlarda kullanılır.

one to one = > 

Convensions : İlişki kurulacak 2 entity arasında ikinise de navigation property tanımlaması yapılır. Parent tabloya child tablosunun 
id kolonu verilmez. Child tablosuna parent tablosunun id kolonu verilir.

Fluent Api  :         modelBuilder.Entity<Product>().HasOne(x => x.ProductFeature).WithOne(x => x.Product).HasForeignKey<ProductFeature>(x => x.ProductId);

Data annotations Attributes : [ForeignKey("ProductId")], Hangisinin parent hangisinin child olduğunu belirtmek için ForeignKey ataması yapılmalıdır.

many to many = > 

Convensions : İlişki kurulacak 2 entity arasında ikinise de navigation property tanımlaması yapılır. İki entity de List tipinde bir property tanımlanır. ef core otomatik olarak ilişkiyi algılar. Ara bir tablo oluşturur.

Fluent Api  :         modelBuilder.Entity<Teacher>().HasMany(x => x.Students).WithMany(x => x.Teachers).UsingEntity<Dictionary<string, object>>(
            "TeacherStudent",
            x => x.HasOne<Student>().WithMany().HasForeignKey("Student_Id"),
            x => x.HasOne<Teacher>().WithMany().HasForeignKey("Teacher_Id")
            );

--------------------------------------------

Delete Behavior :

Cascade : Parent tablo üzerinde bir silme işlemi yapıldığında child tablolar üzerinde de silme işlemi yapar.
Restrict : Parent tablo üzerinde bir silme işlemi yapıldığında child tablosunda bağlı verisi varsa silme işlemi yapmaz ve hata verir.
SetNull : Parent tablo üzerinde bir silme işlemi yapıldığında child tablolar üzerinde parent tabloya ait alanlar null yapılır.
NoAction : Parent tablo üzerinde bir silme işlemi yapıldığında child tablolar üzerinde silme işlemi yapmaz.

--------------------------------------------

Database Generated Attribute :
Computed : Ef core ilgili alanı hem insert hemde update işlemlerinde dahil etme.
     modelBuilder.Entity<Product>().Property(x => x.PriceKdv).ValueGeneratedOnAddOrUpdate();
Identity : Ef core sadece insert işleminde kullan update işleminde ilgili alanı dahil etme.
    modelBuilder.Entity<Product>().Property(x => x.PriceKdv).ValueGeneratedOnAdd();
None : Veritabanı tarafından otomatik değer üretme özelliğini kapatır.
    modelBuilder.Entity<Product>().Property(x => x.PriceKdv).ValueGeneratedNever();

--------------------------------------------

Related Data Load :

Eager Loading : Include metodu ile ilişkili tabloları birlikte çeker.
    var products = _context.Products.Include(x => x.ProductFeature).ToList();
Explicit Loading : İhtiyaç anında ilgili navigation property üzerinden tablo çekme işlemi
    bire çok ilişki varsa :
        var product = _context.Products.FirstOrDefault();
        _context.Entry(product).Collection(x => x.ProductFeature).Load();
    bire bir ilişki varsa : 
    var product = _context.Products.FirstOrDefault();
        _context.Entry(product).Reference(x => x.ProductFeature).Load();
Lazy Loading : Explicit Loading ile yaptığı işlem aynı sadece otomatik olarak yapar. Load etmeye gerek kalmadan direkt 
catalog.products dediğimiz an kayıtları çeker. Bu özelliği aktif etmek gerekir. İkiside tekrar db tarafına gidip select çeker.
Lazy loading yapmak için Microsoft.EntityFrameworkCore.Proxies yüklenmenlidir. Navigation property lerin virtual olması gerekir.
optionsBuilder.UseLazyLoadingProxies().UseSqlServer(DbContextInitializer.Configuration.GetConnectionString("DefaultConnection"));

--------------------------------------------

İnheritance :

TPH(Table Per Hierarchy) : 
2 türlü ele alınır. 
1- Base bir sınıf belirlenir. O sınıf üzerinden farklı sınıflar türetilir. Onmodelcreating metodu içinde base tablo dbset olarak verilmezse ef core db de base tabloyu oluşturmaz.
alt sınıflara atanan kolonlar ile birlikte yeni tabloları oluşturur.
2- Eğer base sınıf dbcontext sınıfı içinde dbset olarak tanımlanırsa ,tüm entitylerin tek bir tablo üzerinde tutulur ve Discriminator adında bir kolon oluşturur.  
tüm kayıtları tip ile ayırt eder. Discriminator kolonu string tipindedir. Discriminator kolonu db de oluşur ve ef core tarafından yönetilir.
Eğer süreç ef core bırakılmayıp kolon ismi ve hangi tabloların hiyerarşik olduğu belirtilmek istenirse Fluent Api kullanılır.
        modelBuilder.Entity<Vehicle>().HasDiscriminator<string>("VehicleType")
            .HasValue<Vehicle>("Vehicle")
            .HasValue<Bike>("Bike")
            .HasValue<SportsCar>("SportsCar");

TPT(Table Per Type) :
Base sınıf ve alt sınıfların ayrı ayrı tabloları oluşturulur. Base sınıf dbset olarak tanımlanır. Alt sınıflar dbset olarak tanımlanmaz.
Bunu yapabilmek için onmodelcreating metodu içinde her entity totable olarak tanımlanır. Ef core bunları db tarafında çoka çok ilişki üzerinden
bağlar. VEriler vehicle tablosunda durur. 
    modelBuilder.Entity<Vehicle>().ToTable("Vehicles");
    modelBuilder.Entity<Bike>().ToTable("Bikes");
    modelBuilder.Entity<SportsCar>().ToTable("SportsCars");

--------------------------------------------

Owned Entity Types : Birden fazla entity içerisinde aynı propertylerin tekrar tekrar tanımlanmasını engellemek için kullanılır.
Farklı bir sınıf tanımlanır. Bu sınıf içinde tekra eden propertyler tanımlanır. Bu sınıfı bir id'si olmaz.
Bu yöntemi uygulamak için data annotations attribute kullanılabilir. 
    [Owned]
    public class Address
    {
        public string City { get; set; }
        public string Street { get; set; }
    }
    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Address Address { get; set; }
    }
Ayrıca fluent api ile de yapılabilir.
    modelBuilder.Entity<Customer>().OwnsOne(x => x.Address);    

Keyless Entity Types : Db de tablo oluşturulmaz. Sadece select işlemleri için kullanılır. 
   fluent api: modelBuilder.Entity<Customer>().HasNoKey();
   data annotations : [Keyless]

--------------------------------------------
Entity Properties :
NotMapped => Db de oluşturulmasını istemediğimiz propertyler için kullanılır.
    Fluent Api : modelBuilder.Entity<Product>().Ignore(x => x.FullName);
    Data Annotations :
    [NotMapped]
    public string FullName { get; set; }
Unicode => Db de nvarchar/varchar olarak oluşturulmasını sağlar.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).IsUnicode(true/false);
    Data Annotations : [Unicode(true/false)]
ColumnType = > Db de oluşturulacak kolonun tipini belirler.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).HasColumnType("varchar(100)");
    Data Annotations : [Column(TypeName = "varchar(100)")]
 MaxLength = > Db de oluşturulacak kolonun max uzunluğunu belirler.
 Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).HasMaxLength(100);
    Data Annotations : [MaxLength(100)]
Required = > Db de oluşturulacak kolonun boş geçilemez olmasını sağlar. 
   Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).IsRequired();
    Data Annotations : [Required]
  HasDefaultValue = > Db de oluşturulacak kolonun default değerini belirler.
   Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).HasDefaultValue("Default");
    Data Annotations : [HasDefaultValue("Default")]
HasComputedColumnSql = > Kolonun uygulama seviyesinde hesaplanmasını engeller. Defautl değer atanarak işlem db de yapılır.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).HasComputedColumnSql("Default");
    Data Annotations : [HasComputedColumnSql("Default")]
ValueGeneratedOnAdd = > Kolonun sadece insert işleminde değer almasını sağlar.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).ValueGeneratedOnAdd();
    Data Annotations : [ValueGeneratedOnAdd]
ValueGeneratedOnAddOrUpdate = > Kolonun insert ve update işlemlerinde değer almasını sağlar.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).ValueGeneratedOnAddOrUpdate();
    Data Annotations : [ValueGeneratedOnAddOrUpdate]
ValueGeneratedNever = > Kolonun insert ve update işlemlerinde değer almamasını sağlar.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.ProductName).ValueGeneratedNever();
    Data Annotations : [ValueGeneratedNever]
--------------------------------------------
Index :
Index : Db de oluşturulacak index i belirler.
    Fluent Api : modelBuilder.Entity<Product>().HasIndex(x => x.ProductName);
    Data Annotations : [Index(nameof(kolon1)]
Composite Index : Birden fazla kolon üzerinde index oluşturmak için kullanılır.
    Fluent Api : modelBuilder.Entity<Product>().HasIndex(x => new { x.ProductName, x.Price });
    Data Annotations : [Index(nameof(Kolon1),nameof(Kolon2))]
Unique Index : Db de oluşturulacak unique index i belirler.
    Fluent Api : modelBuilder.Entity<Product>().HasIndex(x => x.ProductName).IsUnique();
    Data Annotations : [Index(nameof(kolon1), IsUnique = true)]
Include Index : Index oluşturulurken başka kolonlarında index oluşturulmasını sağlar.
    Fluent Api : modelBuilder.Entity<Product>().HasIndex(x => x.ProductName).IncludeProperties(x => x.Price);
    Data Annotations : [Index(nameof(kolon1), IsUnique = true, Include = new[] { nameof(kolon2) })]

----------------------------------------------

Constraints :
Check Constraint : Db de oluşturulacak check constraint i belirler.Kolon ya da tablo bazında verilebilir.
    Fluent Api : modelBuilder.Entity<Product>().Property(x => x.Price).HasCheckConstraint("Price > 0");
                modelBuilder.Entity<Product>().HasCheckConstraint("PriceDiscountCheck","[Price]>[DiscountPrice]");
    Data Annotations : [CheckConstraint("Price > 0")]

----------------------------------------------
Track/No Track :
Track : Db den çekilen verilerin değişikliklerini takip etmek için kullanılır. Default olarak track edilir.
NoTrack : Db den çekilen verilerin değişikliklerini takip etmemek için kullanılır. Büyük verilerin geleceği durumlarda kullanılır.
 
Eğer bu süreci sorgu içinde değil global yerden yönetmk istenirse aşağıdaki kod kullanılır.
 dbcontext altında yer alan OnConfiguring metodu içinde aşağıdaki kod yazılır :
 optionsBuilder.UseSqlServer(DbContextInitializer.Configuration.GetConnectionString("DefaultConnection"))
            .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

----------------------------------------------

Transaction :
 - Eğer tek bir işlem varsa yani tek transaction ile yapılabilecek bir işlem ise ef core savechanges metodu içinde transactionı yönetir.
 - Eğer birden fazla işlem varsa ve bu işlemler birbirine bağlı ise transaction yönetimi yapılmalıdır.

----------------------------------------------

Concunrency Effects:

Lost Update : Aynı anda aynı kayıt üzerinde yapılan işlemlerden biri diğerini siler. Örnek olarak son 2 ayrı transaction da aynı kayıt üzerinde update işlemi yapılırsa
son yapılan işlem diğerini siler.

Dirty Read : Bir transaction içinde yapılan değişiklikler commit edilmeden önce diğer transaction tarafından okunursa buna dirty read denir.

Non-Repeatable Read : Bir transaction için tekrarlı bir okuma yapamama durumudur. Örnek olarak bir transaction içinde bir kayıt okundu. Okunan transaction da farklı işlemler yapılırken
Farklı bir transaction da herhangi bir kayıt silindi. İlk transaction tekrar aynı kaydı okumak istediğinde kayıt bulunamaz. Tutarsız bir durum oluşur.

Phantom Read : Non-Repeatable Read ile aynıdır. Tek fark update işleminin yanı sıra insert işlemi de olabilir.

Isolation seviyesi arttıkça tutarlılık artar fakat performans düşer. Eş zamanlılık çok öenmli ise isolation seviyesi azaltılmaldır.

----------------------------------------------

Isolation Level :
 - Db de aynı anda çalışan işlemlerin birbirlerini etkilememesi için kullanılır.
 - Db de 4 adet isolation level vardır.
    ReadUncommitted : Bir işlem diğer işlemin yaptığı değişiklikleri görebilir. En düşük izolasyon seviyesidir. Veri tutarsızlığının olma ihtimali çok yüksektir. Çünkü farklı 
    transactionlar içinde commit edilmemiş veriler okunabilir.Dirty read, Inconsistent Data , Non-Repeatable Read(Aynı sorgu farklı sonuçlar dönebilir ) , Phantom Read (Insert ve update işlemleri olabilir) gibi sorunlar oluşabilir.
    using (var transaction = _context.Database.BeginTransaction(IsolationLevel.ReadUncommitted)) 

    ReadCommitted : Bir işlem diğer işlemin yaptığı değişiklikleri göremez. Transaction yalnızca commit edilmiş verileri okuyabilir. Dirty read sorunu olmaz. Varsayılan izolasyon seviyesidir.
    Non-Repeatable Read(Aynı sorgu farklı sonuçlar dönebilir ) , Phantom Read (Insert ve update işlemleri olabilir) gibi sorunlar oluşabilir.
    using (var transaction = _context.Database.BeginTransaction(IsolationLevel.ReadCommitted))  

    RepeatableRead : Bir işlem diğer işlemin yaptığı değişiklikleri göremez ve diğer işlemdeki verileri değiştiremez. Örnek olarak bir transaction da products tablosundan 
    id si 1 ile 10 arasında olan 10 kayıt çekilir. Farklı bir transaction da bu id'lerden herhangi biri update ya da delete edilmek istenirse hata alınır. Diğer transaction biteene kadar işlem yapamaz.
    Dirty Read , Non-Repeatable Read önlenir. Phantom Read olabilir.
    using (var transaction = _context.Database.BeginTransaction(IsolationLevel.RepeatableRead))   

    Serializable : Bir işlem diğer işlemlerle aynı anda çalışamaz.  RepeatableRead dan a esktra oalrak insert işlemleri de engellenir.
    Örnek oalrak products tablosuna select çekilir. Farklı bir transaction da insert işlemi yapılırsa hata alınır. diğer transaction bitene kadar işlem yapamaz.
    Dirty Read , Non-Repeatable Read ve Phantom Read önlenir. Fakat Deadlock olabilir , performans sorunları olabilir , paralel çalışmayı engeller.
    using (var transaction = _context.Database.BeginTransaction(IsolationLevel.Serialize))

    Snapshot : Transaction içinde bir tutarlılık sağlar. Diğer transactionlar ile birbirlerini etkilemez. Örnek olarak , snapshot seviyesinde başlatılan bir transaction 
    products tablosuna select çeker. 10 kayıt elde eder. FArklı bir transaction bu tabloya 10 kayıt insert ve update edebilir. Insert ve update işlemi diğer transaction da bittiği zaman
    snapshot seviyesindeki transaction henüz commit edilmediyse tekrar select çektiğimiz durumda hala 10 kayıt gelir. Dirty Read , Non-Repeatable Read ve Phantom Read önlenir.
    using (var transaction = _context.Database.BeginTransaction(IsolationLevel.Snapshot))